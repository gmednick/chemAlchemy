library(RColorBrewer)
pal <- colorFactor(
palette = 'Dark2',
domain = ames_df$neighborhood
)
ames_random_samp <- ames_df %>%
slice_sample(n = 600)
ames_random_samp %>% group_by(neighborhood) %>% leaflet(data = .,
options = leafletOptions(zoomControl = FALSE,
minZoom = 13, maxZoom = 13, dragging = FALSE)) %>%
addTiles() %>%
addCircles(~longitude, ~latitude, color = ~pal(neighborhood), radius = 1, weight = ~sale_price*2e-5, opacity = 1)
```
## Splitting the data
Now that we have a better feel for the data, let's split it into a training and test sets using the `rsample` package. We may also use `vfold_cv()` to resample the training set later on.
```{r}
library(rsample)
set.seed(518)
ames_split <- initial_split(ames_df, prop = 0.8, strata = "sale_price")
ames_train <- training(ames_split)
ames_test <- testing(ames_split)
```
## Data preprocessing
Data engineering with the `recipes` package, provides an arsenal of data transformations that may be necessary and beneficial to the predictive power of our trained machine learning model.
```{r}
library(recipes)
ames_rec <-
recipe(sale_price ~ ., data = ames_train) %>%
step_log(sale_price, base = 10) %>%
step_other(neighborhood, threshold = 0.01) %>%
step_dummy(all_nominal())
```
## Model specification
```{r}
ames_lm <- linear_reg() %>%
set_engine("lm") %>%
set_mode("regression")
```
## Creating a workflow, fitting the model and making predictions on the testset
```{r}
lm_wkfl <-
workflow() %>%
add_model(ames_lm) %>%
add_recipe(ames_rec)
ames_wkfl_fit <- lm_wkfl %>%
last_fit(split = ames_split)
ames_wkfl_fit %>%
collect_metrics()
ames_preds <- ames_wkfl_fit %>%
collect_predictions()
```
## Visualizing R-squared
```{r}
ggplot(ames_preds, aes(x = sale_price, y = .pred)) +
geom_point() +
geom_abline(color = 'blue', linetype = 2) +
coord_obs_pred() +
labs(title = 'R-Squared Plot',
y = 'Predicted Sale Price (log)',
x = 'Actual Sale Price (log)')
```
blogdown::stop_server()
blogdown::serve_site()
blogdown::stop_server()
remotes::install_github('rstudio/blogdown')
blogdown::serve_site()
n <- ggplotly(p)
p <- ames_df %>% select(neighborhood, year_sold, sale_price) %>%
group_by(year_sold) %>%
mutate(avg_sale_price = mean(sale_price),
year_sold = as.factor(year_sold)) %>%
arrange(year_sold) %>%
ggplot(aes(year_sold, sale_price)) +
geom_boxplot() +
theme(legend.position = 'none') +
scale_y_continuous(labels = comma)
knitr::opts_chunk$set(echo=TRUE, message=FALSE, warning=FALSE)
library(tidyverse)
library(tidymodels)
library(AmesHousing)
library(leaflet)
library(plotly)
theme_set(theme_light())
ames_df <- make_ames() %>%
janitor::clean_names() # extracting the data from the AmesHousing package and converting all column names to lower snace_case
# Here are a few functions that I used to get an initial feel for the dataset
#ames_df %>% count(neighborhood)
#summary(ames_df)
#View(ames_df)
#dim(ames_df)
ames_df <- make_ames() %>%
janitor::clean_names() # extracting the data from the AmesHousing package and converting all column names to lower snace_case
# Here are a few functions that I used to get an initial feel for the dataset
#ames_df %>% count(neighborhood)
#summary(ames_df)
#View(ames_df)
#dim(ames_df)
library(scales)
library(patchwork)
sale_price_dist <- ggplot(ames_df, aes(x = sale_price)) +
geom_histogram(bins = 50) +
geom_vline(lty = 2, color = 'red', xintercept = mean(ames_df$sale_price)) +
scale_x_continuous(labels = dollar_format()) +
labs(x = 'sale price')
sale_price_log_dist <- ggplot(ames_df, aes(x = sale_price)) +
geom_histogram(bins = 50) +
geom_vline(lty = 2, color = 'red', xintercept = mean(ames_df$sale_price)) +
#scale_x_continuous(labels = dollar_format())  +
scale_x_log10() +
labs(x = 'log(sale price)')
sale_price_dist | sale_price_log_dist
ames_df %>%
count(neighborhood) %>%
mutate(neighborhood = str_replace_all(neighborhood, "_", " "),
neighborhood = fct_reorder(neighborhood, n)) %>%
ggplot(aes(n, neighborhood, fill = neighborhood)) +
geom_col() +
labs(x = '# of houses sold by neighborhood',
y = "") +
theme(legend.position = 'none')
p <- ames_df %>% select(neighborhood, year_sold, sale_price) %>%
group_by(year_sold) %>%
mutate(avg_sale_price = mean(sale_price),
year_sold = as.factor(year_sold)) %>%
arrange(year_sold) %>%
ggplot(aes(year_sold, sale_price)) +
geom_boxplot() +
theme(legend.position = 'none') +
scale_y_continuous(labels = comma)
n <- ggplotly(p)
htmlwidgets::saveWidget(n, "n.html")
display_html('')
library(htmlwidgets)
saveWidget(n, "n.html")
display_html('')
knitr::opts_chunk$set(echo=TRUE, message=FALSE, warning=FALSE)
library(tidyverse)
library(tidymodels)
library(AmesHousing)
library(leaflet)
library(plotly)
library(htmlwidgets)
theme_set(theme_light())
remotes::install_github("rstudio/blogdown")
blogdown::check_config()
blogdown::check_content()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
knitr::include_graphics("/img/test.jpg")
knitr::include_graphics("/img/test.jpg", error = FALSE)
devtools::install_github('rstudio/rmarkdown')
blogdown::serve_site()
blogdown::stop_server()
blogdown::build_site()
blogdown::serve_site()
blogdown:::new_post_addin()
blogdown::stop_server()
blogdown::serve_site()
knitr::opts_chunk$set(echo=TRUE, message=FALSE, warning=FALSE)
library(tidyverse)
library(tidymodels)
library(AmesHousing)
library(leaflet)
library(plotly)
library(htmlwidgets)
theme_set(theme_light())
ames_df <- make_ames() %>%
janitor::clean_names() # extracting the data from the AmesHousing package and converting all column names to lower snace_case
# Here are a few functions that I used to get an initial feel for the dataset
#ames_df %>% count(neighborhood)
#summary(ames_df)
#View(ames_df)
#dim(ames_df)
library(scales)
library(patchwork)
sale_price_dist <- ggplot(ames_df, aes(x = sale_price)) +
geom_histogram(bins = 50) +
geom_vline(lty = 2, color = 'red', xintercept = mean(ames_df$sale_price)) +
scale_x_continuous(labels = dollar_format()) +
labs(x = 'sale price')
sale_price_log_dist <- ggplot(ames_df, aes(x = sale_price)) +
geom_histogram(bins = 50) +
geom_vline(lty = 2, color = 'red', xintercept = mean(ames_df$sale_price)) +
#scale_x_continuous(labels = dollar_format())  +
scale_x_log10() +
labs(x = 'log(sale price)')
sale_price_dist | sale_price_log_dist
ames_df %>%
count(neighborhood) %>%
mutate(neighborhood = str_replace_all(neighborhood, "_", " "),
neighborhood = fct_reorder(neighborhood, n)) %>%
ggplot(aes(n, neighborhood, fill = neighborhood)) +
geom_col() +
labs(x = '# of houses sold by neighborhood',
y = "") +
theme(legend.position = 'none')
p <- ames_df %>% select(neighborhood, year_sold, sale_price) %>%
group_by(year_sold) %>%
mutate(avg_sale_price = mean(sale_price),
year_sold = as.factor(year_sold)) %>%
arrange(year_sold) %>%
ggplot(aes(year_sold, sale_price)) +
geom_boxplot() +
theme(legend.position = 'none') +
scale_y_continuous(labels = comma)
n <- ggplotly(p)
n
library(RColorBrewer)
pal <- colorFactor(
palette = 'Dark2',
domain = ames_df$neighborhood
)
library(RColorBrewer)
pal <- colorFactor(
palette = 'Dark2',
domain = ames_df$neighborhood
)
ames_random_samp <- ames_df %>%
slice_sample(n = 600)
ames_random_samp %>% group_by(neighborhood) %>% leaflet(data = .,
options = leafletOptions(zoomControl = FALSE,
minZoom = 13, maxZoom = 13, dragging = FALSE)) %>%
addTiles() %>%
addCircles(~longitude, ~latitude, color = ~pal(neighborhood), radius = 1, weight = ~sale_price*2e-5, opacity = 1)
library(rsample)
set.seed(518)
ames_split <- initial_split(ames_df, prop = 0.8, strata = "sale_price")
ames_train <- training(ames_split)
ames_test <- testing(ames_split)
library(recipes)
ames_rec <-
recipe(sale_price ~ ., data = ames_train) %>%
step_log(sale_price, base = 10) %>%
step_other(neighborhood, threshold = 0.01) %>%
step_dummy(all_nominal())
ames_lm <- linear_reg() %>%
set_engine("lm") %>%
set_mode("regression")
lm_wkfl <-
workflow() %>%
add_model(ames_lm) %>%
add_recipe(ames_rec)
ames_wkfl_fit <- lm_wkfl %>%
last_fit(split = ames_split)
ames_wkfl_fit %>%
collect_metrics()
ames_preds <- ames_wkfl_fit %>%
collect_predictions()
ggplot(ames_preds, aes(x = sale_price, y = .pred)) +
geom_point() +
geom_abline(color = 'blue', linetype = 2) +
coord_obs_pred() +
labs(title = 'R-Squared Plot',
y = 'Predicted Sale Price (log)',
x = 'Actual Sale Price (log)')
blogdown::check_site()
blogdown::config_netlify()
blogdown::config_Rprofile()
blogdown::stop_server()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
us_monthly
plot_usmap(
data = us_monthly,
values = "cases_per_1e6",
color = "black") +
theme(panel.background = element_rect(color = "black", fill = "grey80")) +
theme(legend.position = "right", plot.title = element_text(face = "bold", size = 18, color = "#367588")) +
labs(title = paste0("Cases by County")) +
scale_fill_viridis_c(
name = "Cases by Month",
alpha = 0.5
)
library(tidyverse)
library(lubridate)
library(shiny)
library(shinydashboard)
library(usmap)
library(ggrepel)
library(plotly)
library(viridis)
library(shinythemes)
theme_set(theme_light())
scale_colour_discrete <- scale_colour_viridis_d
library(gganimate)
library(transformr)
library(directlabels)
plot_usmap(
data = us_monthly,
values = "cases_per_1e6",
color = "black") +
theme(panel.background = element_rect(color = "black", fill = "grey80")) +
theme(legend.position = "right", plot.title = element_text(face = "bold", size = 18, color = "#367588")) +
labs(title = paste0("Cases by County")) +
scale_fill_viridis_c(
name = "Cases by Month",
alpha = 0.5
)
library(gganimate)
library(transformr)
library(directlabels)
us_monthly <- us_state %>%
mutate(month = month(date),
month_name = factor(month.name[month],levels=month.name)) %>%
group_by(state, month, month_name) %>%
summarize(
cases = max(cases),
deaths = max(deaths),
population = max(population)
) %>%
filter(cases > 0) %>%
mutate(
deaths_per_1e6 = 1000000 * (deaths / population),
cases_per_1e6 = 1000000 * (cases / population)
) %>%
filter(!is.na(deaths_per_1e6))
p <- plot_usmap(
data = us_monthly,
values = "cases_per_1e6",
color = "black") +
theme(panel.background = element_rect(color = "black", fill = "grey80")) +
theme(legend.position = "right", plot.title = element_text(face = "bold", size = 18, color = "#367588")) +
labs(title = paste0("Cases by County")) +
scale_fill_viridis_c(
name = "Cases by Month",
alpha = 0.5
)
p <- p +
transition_states(month_name) +
labs(title = 'Month is {closest_state}')
animate(p, fps=5, end_pause = 20)
knitr::opts_chunk$set(echo=TRUE, message=FALSE, warning=FALSE,
fig.path = 'static/')
library(tidyverse)
library(tidymodels)
library(AmesHousing)
library(leaflet)
library(plotly)
library(htmlwidgets)
theme_set(theme_light())
library(recipes)
ggplot(ames_wkfl_fit, aes(x = sale_price, y = .pred)) +
geom_point() +
geom_abline(color = 'blue', linetype = 2) +
coord_obs_pred() +
labs(title = 'R-Squared Plot',
y = 'Predicted Sale Price (log)',
x = 'Actual Sale Price (log)')
ames_wkfl_fit
ames_wkfl_fit
library(rsample)
set.seed(518)
ames_split <- initial_split(ames_df, prop = 0.8, strata = "sale_price")
knitr::opts_chunk$set(echo=TRUE, message=FALSE, warning=FALSE,
fig.path = 'static/')
library(tidyverse)
library(tidymodels)
library(AmesHousing)
library(leaflet)
library(plotly)
library(htmlwidgets)
theme_set(theme_light())
ames_df <- make_ames() %>%
janitor::clean_names() # extracting the data from the AmesHousing package and converting all column names to lower snace_case
# Here are a few functions that I used to get an initial feel for the dataset
#ames_df %>% count(neighborhood)
#summary(ames_df)
#View(ames_df)
#dim(ames_df)
ames_df %>%
count(neighborhood) %>%
mutate(neighborhood = str_replace_all(neighborhood, "_", " "),
neighborhood = fct_reorder(neighborhood, n)) %>%
ggplot(aes(n, neighborhood, fill = neighborhood)) +
geom_col() +
labs(x = '# of houses sold by neighborhood',
y = "") +
theme(legend.position = 'none')
p <- ames_df %>% select(neighborhood, year_sold, sale_price) %>%
group_by(year_sold) %>%
mutate(avg_sale_price = mean(sale_price),
year_sold = as.factor(year_sold)) %>%
arrange(year_sold) %>%
ggplot(aes(year_sold, sale_price)) +
geom_boxplot() +
theme(legend.position = 'none') +
scale_y_continuous(labels = comma)
n <- ggplotly(p)
n
library(RColorBrewer)
pal <- colorFactor(
palette = 'Dark2',
domain = ames_df$neighborhood
)
library(RColorBrewer)
pal <- colorFactor(
palette = 'Dark2',
domain = ames_df$neighborhood
)
ames_random_samp <- ames_df %>%
slice_sample(n = 600)
ames_random_samp %>% group_by(neighborhood) %>% leaflet(data = .,
options = leafletOptions(zoomControl = FALSE,
minZoom = 13, maxZoom = 13, dragging = FALSE)) %>%
addTiles() %>%
addCircles(~longitude, ~latitude, color = ~pal(neighborhood), radius = 1, weight = ~sale_price*2e-5, opacity = 1)
library(rsample)
set.seed(518)
ames_split <- initial_split(ames_df, prop = 0.8, strata = "sale_price")
ames_train <- training(ames_split)
ames_test <- testing(ames_split)
library(recipes)
ames_rec <-
recipe(sale_price ~ ., data = ames_train) %>% # Specify the model--in our case, we are using all variables (.) to predict sale price.
step_log(sale_price, base = 10) %>% # take the log of sale price
step_other(neighborhood, threshold = 0.01) %>%
step_normalize(all_numeric()) %>%
step_dummy(all_nominal())
ames_lm <- linear_reg() %>%
set_engine("lm") %>%
set_mode("regression")
library(workflow) #loaded with tidymodels
ggplot(ames_preds, aes(x = sale_price, y = .pred)) +
geom_point() +
geom_abline(color = 'blue', linetype = 2) +
coord_obs_pred() +
labs(title = 'R-Squared Plot',
y = 'Predicted Sale Price (log)',
x = 'Actual Sale Price (log)')
library(workflows) #loaded with tidymodels
library(workflows) #loaded with tidymodels
lm_wkfl <-
workflow() %>%
add_model(ames_lm) %>%
add_recipe(ames_rec)
ames_wkfl_fit <- lm_wkfl %>%
last_fit(split = ames_split)
ames_wkfl_fit %>%
collect_metrics()
ames_wkfl_fit %>%
collect_predictions()
ggplot(ames_wkfl_fit, aes(x = sale_price, y = .pred)) +
geom_point() +
geom_abline(color = 'blue', linetype = 2) +
coord_obs_pred() +
labs(title = 'R-Squared Plot',
y = 'Predicted Sale Price (log)',
x = 'Actual Sale Price (log)')
ames_wkfl_fit
ames_wkfl_fit
lm_wkfl
ames_wkfl_fit
ames_wkfl_fit %>%
collect_metrics()
ames_wkfl_fit %>%
collect_predictions()
ggplot(ames_wkfl_fit, aes(x = sale_price, y = .pred)) +
geom_point() +
geom_abline(color = 'blue', linetype = 2) +
coord_obs_pred() +
labs(title = 'R-Squared Plot',
y = 'Predicted Sale Price (log)',
x = 'Actual Sale Price (log)')
ames_wkfl_fit
ames_wkfl_fit %>%
select_best()
ames_wkfl_fit %>%
collect_predictions() %>%
ggplot(aes(x = sale_price, y = .pred)) +
geom_point() +
geom_abline(color = 'blue', linetype = 2) +
coord_obs_pred() +
labs(title = 'R-Squared Plot',
y = 'Predicted Sale Price (log)',
x = 'Actual Sale Price (log)')
ames_wkfl_fit %>%
collect_predictions() %>%
mutate(sale_price = 10^sale_price,
.pred = 10^.pred) %>%
ggplot(aes(x = sale_price, y = .pred)) +
geom_point() +
geom_abline(color = 'blue', linetype = 2) +
coord_obs_pred() +
labs(title = 'R-Squared Plot',
y = 'Predicted Sale Price (log)',
x = 'Actual Sale Price (log)')
ames_wkfl_fit %>%
collect_predictions() %>%
mutate(sale_price = 10^sale_price,
.pred = 10^.pred) %>%
ggplot(aes(x = sale_price, y = .pred)) +
geom_point() +
geom_abline(color = 'blue', linetype = 2) +
coord_obs_pred() +
labs(title = 'R-Squared Plot',
y = 'Predicted Sale Price',
x = 'Actual Sale Price')
ames_wkfl_fit %>%
collect_predictions() %>%
ggplot(aes(x = sale_price, y = .pred)) +
geom_point() +
geom_abline(color = 'blue', linetype = 2) +
coord_obs_pred() +
labs(title = 'R-Squared Plot',
y = 'Predicted Sale Price (log)',
x = 'Actual Sale Price (log)')
blogdown::stop_server()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
