fit_resamples(
resamples = iris_boots,
control = control_resamples(extract = extract_model,
save_pred = TRUE)
)
collect_metrics(glm_results)
glm_results %>%
collect_predictions() %>%
group_by(id) %>%
roc_curve(species, .pred_class) %>%
ggplot(aes(1 - specificity, sensitivity, color = id)) +
geom_abline(lty = 2, color = "gray80", size = 1.5) +
geom_path(show.legend = FALSE, alpha = 0.6, size = 1.2) +
coord_equal()
levels(iris_df$species)
glm_results %>%
collect_predictions() %>%
group_by(id) %>%
roc_curve(species, .pred_setosa) %>%
ggplot(aes(1 - specificity, sensitivity, color = id)) +
geom_abline(lty = 2, color = "gray80", size = 1.5) +
geom_path(show.legend = FALSE, alpha = 0.6, size = 1.2) +
coord_equal()
glm_results %>%
collect_predictions() %>%
group_by(id)
glm_results %>%
collect_predictions() %>%
group_by(id) %>%
roc_curve(species, .pred_class$setosa) %>%
ggplot(aes(1 - specificity, sensitivity, color = id)) +
geom_abline(lty = 2, color = "gray80", size = 1.5) +
geom_path(show.legend = FALSE, alpha = 0.6, size = 1.2) +
coord_equal()
glm_results %>%
collect_predictions() %>%
group_by(id)
glm_results %>%
collect_predictions() %>%
group_by(id) %>%
roc_curve(species, .pred_class$stosa) %>%
ggplot(aes(1 - specificity, sensitivity, color = id)) +
geom_abline(lty = 2, color = "gray80", size = 1.5) +
geom_path(show.legend = FALSE, alpha = 0.6, size = 1.2) +
coord_equal()
glm_results %>%
collect_predictions() %>%
group_by(id) %>%
roc_curve(species, .pred_class$setosa) %>%
ggplot(aes(1 - specificity, sensitivity, color = id)) +
geom_abline(lty = 2, color = "gray80", size = 1.5) +
geom_path(show.legend = FALSE, alpha = 0.6, size = 1.2) +
coord_equal()
glm_results %>%
collect_predictions() %>%
group_by(id) %>%
roc_curve(species, .pred_class[setosa]) %>%
ggplot(aes(1 - specificity, sensitivity, color = id)) +
geom_abline(lty = 2, color = "gray80", size = 1.5) +
geom_path(show.legend = FALSE, alpha = 0.6, size = 1.2) +
coord_equal()
glm_results %>%
collect_predictions() %>%
group_by(id)
glm_results %>%
conf_mat_resampled()
glm_results %>%
conf_mat()
glm_results %>%
conf_mat(species, .pred_class)
glm_results
glm_results %>%
collect_predictions() %>%
group_by(id) %>%
conf_mat(species, .pred_class)
glm_results %>%
collect_predictions()
glm_results %>%
collect_predictions() %>%
group_by(id == 'Bootstrap01') %>%
conf_mat(species, .pred_class)
glm_results %>%
conf_mat(species, .pred_class)
glm_results %>%
conf_mat_resampled()
glm_results %>%
collect_predictions() %>%
group_by(id)
glm_results %>%
collect_predictions() %>%
group_by(id) %>%
roc_curve(species, .pred_setosa) %>%
ggplot(aes(1 - specificity, sensitivity, color = id)) +
geom_abline(lty = 2, color = "gray80", size = 1.5) +
geom_path(show.legend = FALSE, alpha = 0.6, size = 1.2) +
coord_equal()
glm_results %>%
collect_predictions() %>%
group_by(id)
glm_results %>%
collect_predictions() %>%
group_by(id) %>%
roc_curve(species, .pred_versicolor) %>%
ggplot(aes(1 - specificity, sensitivity, color = id)) +
geom_abline(lty = 2, color = "gray80", size = 1.5) +
geom_path(show.legend = FALSE, alpha = 0.6, size = 1.2) +
coord_equal()
glm_results %>%
collect_predictions() %>%
group_by(id)
glm_mod <- multinom_reg(penalty = 0) %>% set_engine("glmnet") %>%
set_mode("classification")
glm_results <- glm_wf %>%
add_model(glm_mod) %>%
fit_resamples(
resamples = iris_boots,
control = control_resamples(extract = extract_model,
save_pred = TRUE)
)
collect_metrics(glm_results)
glm_results %>%
collect_predictions() %>%
group_by(id) %>%
roc_curve(species, .pred_setosa) %>%
ggplot(aes(1 - specificity, sensitivity, color = id)) +
geom_abline(lty = 2, color = "gray80", size = 1.5) +
geom_path(show.legend = FALSE, alpha = 0.6, size = 1.2) +
coord_equal()
glm_results %>%
collect_predictions() %>%
group_by(id)
glm_results %>%
collect_predictions() %>%
group_by(id) %>%
roc_curve(species, .pred_setosa:.pred_virginica) %>%
ggplot(aes(1 - specificity, sensitivity, color = id)) +
geom_abline(lty = 2, color = "gray80", size = 1.5) +
geom_path(show.legend = FALSE, alpha = 0.6, size = 1.2) +
coord_equal()
glm_results %>%
collect_predictions() %>%
group_by(id) %>%
roc_curve(species, .pred_setosa:.pred_virginica) %>%
autoplot()
rf_results %>%
collect_predictions() %>%
group_by(id) %>%
roc_curve(species, .pred_setosa:.pred_virginica) %>%
ggplot(aes(1 - specificity, sensitivity, color = id)) +
geom_abline(lty = 2, color = "gray80", size = 1.5) +
geom_path(show.legend = FALSE, alpha = 0.6, size = 1.2) +
coord_equal()
rf_results %>%
collect_predictions() %>%
group_by(id) %>%
roc_curve(species, .pred_setosa:.pred_virginica) %>%
autoplot()
rf_results %>%
collect_predictions() %>%
group_by(id) %>%
roc_curve(species, .pred_setosa:.pred_virginica) %>%
autoplot() +
theme(legend.position = 'none')
glm_results %>%
conf_mat(species, .pred_setosa:.pred_virginica)
glm_results %>%
collect_predictions() %>%
group_by(id) %>%
conf_mat(species, .pred_setosa:.pred_virginica) %>%
autoplot()
glm_results %>%
collect_predictions() %>%
group_by(id)
glm_results %>%
collect_predictions() %>%
group_by(id) %>%
conf_mat(species, .pred_setosa:.pred_virginica) %>%
autoplot()
glm_results %>%
collect_predictions() %>%
group_by(id)
glm_results %>%
collect_predictions() %>%
group_by(id) %>%
conf_mat(species, .pred_class) %>%
autoplot()
glm_results %>%
collect_predictions() %>%
group_by(id) %>%
conf_mat(species, .pred_setosa:.pred_virginica) %>%
autoplot()
glm_results %>%
conf_mat_resampled()
glm_results %>%
conf_mat_resampled() %>%
autoplot()
glm_results %>%
collect_pred
glm_results %>%
collect_predictions() %>%
group_by(id)
glm_results %>%
collect_predictions() %>%
group_by(id) %>%
conf_mat(species, .pred_class) %>%
autoplot()
glm_results %>%
collect_predictions() %>%
group_by(id) %>%
conf_mat(species, .pred_class)
glm_results %>%
collect_predictions() %>%
group_by(id = Bootstrap01) %>%
conf_mat(species, .pred_class)
glm_results %>%
collect_predictions() %>%
group_by(id = 'Bootstrap01') %>%
conf_mat(species, .pred_class)
glm_results %>%
collect_predictions() %>%
group_by(id = 'Bootstrap01') %>%
conf_mat(species, .pred_class) %>%
unlist()
glm_results %>%
collect_predictions() %>%
group_by(id = 'Bootstrap01') %>%
conf_mat(species, .pred_setosa:.pred_virginica) %>%
unlist()
glm_results %>%
collect_predictions() %>%
group_by(id = 'Bootstrap01') %>%
conf_mat(species, .pred_class) %>%
unlist() %>%
table()
glm_results %>%
collect_predictions() %>%
group_by(id = 'Bootstrap01') %>%
conf_mat(species, .pred_class) %>%
unlist(-id) %>%
table()
glm_results %>%
collect_predictions() %>%
group_by(id = 'Bootstrap01') %>%
conf_mat(species, .pred_class) %>%
unlist(-id)
glm_results %>%
collect_predictions() %>%
group_by(id = 'Bootstrap01') %>%
conf_mat(species, .pred_class) %>%
unlist()
glm_results %>%
collect_predictions() %>%
group_by(id = 'Bootstrap01') %>%
conf_mat(species, .pred_class)
glm_results %>%
collect_predictions() %>%
group_by(id = 'Bootstrap01') %>%
conf_mat(species, .pred_class) %>%
autoplot()
glm_results %>%
conf_mat_resampled()
glm_results %>%
conf_mat_resampled()
final_glm <- glm_wf %>%
add_model(glm_mod) %>%
last_fit(tidy_split)
final_glm
final_rf <- rf_wf %>%
add_model(rf_mod) %>%
last_fit(tidy_split)
final_rf
collect_metrics(final_glm)
collect_predictions(final_glm) %>%
conf_mat(species, .pred_class)
collect_predictions(final_glm) %>%
conf_mat(species, .pred_class) %>%
autoplot()
?autoplot
collect_predictions(final_glm) %>%
conf_mat(species, .pred_class) %>%
autoplot(type = 'heat')
collect_predictions(final_glm) %>%
conf_mat(species, .pred_class) %>%
autoplot(type = 'heatmap')
collect_metrics(final_rf)
collect_predictions(final_rf) %>%
conf_mat(species, .pred_class) %>%
autoplot(type = 'heatmap')
```{r}
final_glm$.workflow[[1]] %>%
tidy(exponentiate = TRUE)
final_glm$.workflow[[1]] %>%
tidy(exponentiate = TRUE) %>%
arrange(desc(estimate))
final_glm
final_glm$.workflow[[1]] %>%
tidy(exponentiate = TRUE) %>%
arrange(estimate)
final_glm$.workflow[[1]] %>%
tidy() %>%
arrange(estimate)
final_glm$.workflow[[1]] %>%
tidy(exponentiate = TRUE) %>%
arrange(estimate)
final_rf$.workflow[[1]] %>%
tidy() %>%
arrange(estimate)
final_glm$.workflow[[1]] %>%
broom::tidy(exponentiate = TRUE) %>%
arrange(estimate)
final_rf$.workflow[[1]] %>%
broom::tidy() %>%
arrange(estimate)
final_rf$.workflow[[1]]
final_glm$.workflow[[1]]
final_glm$.workflow[[1]] %>%
broom::tidy(exponentiate = TRUE)
final_glm$.workflow[[1]] %>%
tidy(exponentiate = TRUE) %>%
arrange(estimate)
getwd()
blogdown::stop_server()
blogdown::serve_site()
iris_df
# load the iris data set
iris_df<- iris %>%
clean_names()
iris_df %>%  head()
iris_df %>%  count(species)
# equal number of each species, 150 total
iris_df %>%  summary()
# No NAs, the data is clean!
# load the iris data set
iris_df<- iris %>%
clean_names()
# equal number of each species, 150 total
iris_df %>%  glimpse()
# equal number of each species, 150 total
iris_df %>%  str()
# equal number of each species, 150 total
iris_df %>%  str()
iris_df %>%  count(species)
?cowplot
install.packages("cowplot")
?cowplot
library(cowplot)
?cowplot
p1 <- iris_df %>%
ggplot(aes(sepal_length, sepal_width, color = species)) +
geom_point() + facet_wrap(~species)
p2 <- iris_df %>%
ggplot(aes(petal_length, petal_width, color = species)) +
geom_point() + facet_wrap(~species)
features_plot <- align_plots(p1, p2, align="hv", axis="tblr")
features_plot
iris_df %>%
ggplot(aes(sepal_length, sepal_width, color = species)) +
geom_point() + facet_wrap(~species)
iris_df %>%
ggplot(aes(petal_length, petal_width, color = species)) +
geom_point() + facet_wrap(~species)
iris_df_long <- iris_df %>%
pivot_longer(cols = sepal_length:petal_width,
names_to = 'metric',
values_to ='value')
iris_df_long %>%
ggplot(aes(value, metric, color = species)) +
geom_boxplot() + coord_flip()
iris_df_long %>%
ggplot(aes(value, fill = species)) +
geom_histogram(bins = 20, alpha = 0.7) +
facet_wrap(~ metric, scales = "free_x")
iris_df_long %>%
ggplot(aes(value, fill = species)) +
geom_density(alpha = .5) +
facet_wrap(~ metric, scales = "free")
iris_df_long %>%
ggplot(aes(species, value, color = species)) +
geom_boxplot(alpha = 0.3) +
facet_wrap(~ metric, scales = "free_y")
iris_df %>%  head()
blogdown:::insert_image_addin()
getwd()
final_glmnet$.workflow[[1]] %>%
tidy(exponentiate = TRUE) %>%
arrange(desc(estimate))
data("ames")
ames
install.packages("tmap")
library(tmap)
tm_shape('United State') +
tm_borders()
tm_shape('United States') +
tm_borders()
tm_shape(United States) +
tm_shape(United States) + tm_borders()
tm_shape(Europe) + tm_borders()
data(Europe)
?tmap
data('United States')
data('World')
tm_shape('World') +
tm_polygons('HPI')
tm_shape(World) + tm_polygons('HMI')
# Randomly select 9 country names
# set.seed(1014) if you want the same 9 countries to be selected each time
country_random <- crop_yield_tidy %>%
group_by(crop) %>%
filter(crop >= 58) %>%
select(country) %>%
distinct() %>%
slice_sample(n = 9) %>%
pull()
# Load the data with a readr function
crop_yields <- read_csv("https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2020/2020-09-01/key_crop_yields.csv")
library(knitr)
knitr::opts_chunk$set(cache = TRUE, warning = FALSE, message = FALSE,
echo = TRUE, dpi = 300, cache.lazy = FALSE,
tidy = "styler", fig.width = 10, fig.height = 6)
options(cli.width = 70, width = 70)
library(tidyverse)
library(tidymodels)
library(scales)
theme_set(theme_light())
crop_yields %>% count(Year)
# Use janitor package to clean column names and pivot_longer from tidyr to tidy the data.
crop_yield_tidy <- crop_yields %>%
janitor::clean_names() %>%
rename_all(str_remove, "_tonnes.*") %>%
rename(country = entity) %>%
pivot_longer(wheat:bananas, names_to = 'crop', values_to = 'yield_hectare') %>%
drop_na(yield_hectare)
kable(head(crop_yield_tidy, n = 10))
# Randomly select 9 country names
# set.seed(1014) if you want the same 9 countries to be selected each time
country_random <- crop_yield_tidy %>%
group_by(crop) %>%
filter(crop >= 58) %>%
select(country) %>%
distinct() %>%
slice_sample(n = 9) %>%
pull()
# another option would be to set the code equal to a set selection of countries: E.g., countries <- c('GUM',	'IND',	'YEM',	'NAM',	'URY', 'USA')
# Plot crop yield per hectare.
library(tidytext)
usa_col_plot <- crop_yield_tidy %>%
filter(country == 'United States') %>%
mutate(crop = fct_reorder(crop, yield_hectare)) %>%
ggplot(aes(yield_hectare, crop, fill = crop)) +
geom_col()  +
facet_wrap(~country, scales = 'free_y') +
theme(legend.position =  'none') +
labs(
title = 'Crop Yield USA',
y = 'Crop',
x = 'tonnes per hectare'
)
usa_col_plot
column_plot <- crop_yield_tidy %>%
filter(country == country_random) %>%
mutate(crop = reorder_within(crop, yield_hectare, country)) %>%
ggplot(aes(yield_hectare, crop, fill = crop)) +
geom_col()  +
scale_y_reordered() +
facet_wrap(~country, scales = 'free_y') +
theme(legend.position =  'none') +
labs(
title = 'Crop Yield',
y = 'Crop',
x = 'yield per hectare'
)
column_plot
crop_yield_tidy %>%
group_by(crop) %>%
filter(crop >= 58)
crop_yield_tidy %>%
group_by(crop) %>%
filter(crop >= 58) %>%
select(country) %>%
distinct()
?count
?add_count
crop_yield_tidy %>%
add_count(crop) %>%
filter(crop >= 58)
crop_yield_tidy %>%
add_count(year, crop)
# Randomly select 9 country names
# set.seed(1014) if you want the same 9 countries to be selected each time
country_random <- crop_yield_tidy %>%
add_count(year, crop) %>%
filter(crop >= 58) %>%
select(country) %>%
distinct() %>%
slice_sample(n = 9) %>%
pull()
column_plot <- crop_yield_tidy %>%
filter(country == country_random) %>%
mutate(crop = reorder_within(crop, yield_hectare, country)) %>%
ggplot(aes(yield_hectare, crop, fill = crop)) +
geom_col()  +
scale_y_reordered() +
facet_wrap(~country, scales = 'free_y') +
theme(legend.position =  'none') +
labs(
title = 'Crop Yield',
y = 'Crop',
x = 'yield per hectare'
)
column_plot
blogdown::stop_server()
blogdown::serve_site()
