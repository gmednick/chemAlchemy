<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>machine learning | Gabe Mednick</title>
    <link>/tag/machine-learning/</link>
      <atom:link href="/tag/machine-learning/index.xml" rel="self" type="application/rss+xml" />
    <description>machine learning</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>en-us</language><copyright>© Gabe Mednick 2021</copyright><lastBuildDate>Wed, 21 Oct 2020 00:00:00 +0000</lastBuildDate>
    <image>
      <url>/images/icon_hu2bd56874e2a90c0733f2eeed0ff2ec73_9038457_512x512_fill_lanczos_center_2.png</url>
      <title>machine learning</title>
      <link>/tag/machine-learning/</link>
    </image>
    
    <item>
      <title>Iris Classification</title>
      <link>/post/iris-classification/</link>
      <pubDate>Wed, 21 Oct 2020 00:00:00 +0000</pubDate>
      <guid>/post/iris-classification/</guid>
      <description>


&lt;div id=&#34;iris-data&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Iris data&lt;/h1&gt;
&lt;p&gt;The iris dataset is a classic, so much so that it’s included in the datasets package that comes with every installation of R. You can use &lt;code&gt;data()&lt;/code&gt; to see a list of all available datasets. Datasets that are associated with packages can be found in a similar way, e.g., &lt;code&gt;data(package = &#39;dplyr&#39;)&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Let’s take a look at the data.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# load the iris data set and clean the column names with janitor::clean_names()
iris_df&amp;lt;- iris %&amp;gt;% 
  clean_names() 

iris_df %&amp;gt;%  head()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##   sepal_length sepal_width petal_length petal_width species
## 1          5.1         3.5          1.4         0.2  setosa
## 2          4.9         3.0          1.4         0.2  setosa
## 3          4.7         3.2          1.3         0.2  setosa
## 4          4.6         3.1          1.5         0.2  setosa
## 5          5.0         3.6          1.4         0.2  setosa
## 6          5.4         3.9          1.7         0.4  setosa&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;iris_df %&amp;gt;%  count(species)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##      species  n
## 1     setosa 50
## 2 versicolor 50
## 3  virginica 50&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# equal number of each species, 150 total

iris_df %&amp;gt;%  str()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## &amp;#39;data.frame&amp;#39;:    150 obs. of  5 variables:
##  $ sepal_length: num  5.1 4.9 4.7 4.6 5 5.4 4.6 5 4.4 4.9 ...
##  $ sepal_width : num  3.5 3 3.2 3.1 3.6 3.9 3.4 3.4 2.9 3.1 ...
##  $ petal_length: num  1.4 1.4 1.3 1.5 1.4 1.7 1.4 1.5 1.4 1.5 ...
##  $ petal_width : num  0.2 0.2 0.2 0.2 0.2 0.4 0.3 0.2 0.2 0.1 ...
##  $ species     : Factor w/ 3 levels &amp;quot;setosa&amp;quot;,&amp;quot;versicolor&amp;quot;,..: 1 1 1 1 1 1 1 1 1 1 ...&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The data is clean but with only 150 observations, it’s worth questioning whether a reliable model can be generated. There are four variables or features (sepal length and width, and petal length and width) in our data and three unique species.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Let’s use the data to create a classification model that predicts the species of iris based on a flower’s measurements.&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;visualize-relationships&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Visualize relationships&lt;/h1&gt;
&lt;p&gt;Before we do any kind of machine learning, it’s helpful to visualize the data and develop a better understanding of the variables as well as their relationships. This will also give us a stronger intuitive sense about the potential predictive power of the data.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;sepal &amp;lt;- iris_df %&amp;gt;% 
  ggplot(aes(sepal_length, sepal_width, color = species)) +
  geom_point(size = 1) + facet_wrap(~species) +
  labs(x = &amp;#39;sepal length&amp;#39;,
       y = &amp;#39;sepal width&amp;#39;) +
  theme(legend.position = &amp;#39;none&amp;#39;) 

petal &amp;lt;- iris_df %&amp;gt;% 
  ggplot(aes(petal_length, petal_width, color = species)) +
  geom_point(size =1) + facet_wrap(~species) +
  labs(x = &amp;#39;petal length&amp;#39;,
       y = &amp;#39;petal width&amp;#39;) +
  theme(legend.position = &amp;#39;none&amp;#39;) 

(petal/sepal) # patchwork allows us to arrange plots side-by-side or stacked but there&amp;#39;s a better way..&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2020-10-21-iris-data/index_files/figure-html/unnamed-chunk-2-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;tidy-the-dataset&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Tidy the dataset&lt;/h1&gt;
&lt;p&gt;Let’s change the shape of our data by combining the four iris features into a single column (named &lt;code&gt;metric&lt;/code&gt;) and the associated values will populate a new column (named &lt;code&gt;value&lt;/code&gt;). This transformation into a longer dataset can be achieved with the function &lt;code&gt;pivot_longer()&lt;/code&gt;. As we shall see, the tidy format lends itself to data visualization and analysis with the tidyverse.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;iris_df_long &amp;lt;- iris_df %&amp;gt;%  
  pivot_longer(cols = sepal_length:petal_width,
               names_to = &amp;#39;metric&amp;#39;,
               values_to =&amp;#39;value&amp;#39;) 
# A boxplot is a great way to see the median values of our features by species.
iris_df_long %&amp;gt;% 
  ggplot(aes(metric, value, color = species)) +
  geom_boxplot() &lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2020-10-21-iris-data/index_files/figure-html/unnamed-chunk-3-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# A nice alternative is to facet by the metric to convey the same information but with added clarity. 
iris_df_long %&amp;gt;%
  ggplot(aes(species, value, color = species)) +
  geom_boxplot(alpha = 0.3) +
  facet_wrap(~ metric, scales = &amp;quot;free_y&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2020-10-21-iris-data/index_files/figure-html/unnamed-chunk-3-2.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# The same information can be displayed by comparing the distributions in histogram.
iris_df_long %&amp;gt;%
  ggplot(aes(value, fill = species)) +
  geom_histogram(bins = 20, alpha = 0.7) +
  facet_wrap(~ metric, scales = &amp;quot;free_x&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2020-10-21-iris-data/index_files/figure-html/unnamed-chunk-3-3.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# geom_denisty is a nice alternative to geom_histogram.
iris_df_long %&amp;gt;% 
  ggplot(aes(value, fill = species)) +
  geom_density(alpha = .5) +
  facet_wrap(~ metric, scales = &amp;quot;free&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2020-10-21-iris-data/index_files/figure-html/unnamed-chunk-3-4.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;get-modelling&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Get modelling&lt;/h1&gt;
&lt;p&gt;Before we get to modeling, we need to split the data. By default, &lt;code&gt;initial split()&lt;/code&gt; provides a 75:25 split for our train and test sets respectively. Since our dataset is small, we are going to take the training set and make bootstrap resamples. The function &lt;code&gt;bootstraps()&lt;/code&gt; will take the training data, further split it into a training and test set, then repeat this process with replacement a specified number of times.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;set.seed(123)
tidy_split &amp;lt;- initial_split(iris_df)
tidy_split&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## &amp;lt;Analysis/Assess/Total&amp;gt;
## &amp;lt;113/37/150&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;iris_train &amp;lt;- training(tidy_split)
iris_test &amp;lt;- testing(tidy_split)

iris_boots &amp;lt;- bootstraps(iris_train, times = 30) 
iris_boots&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # Bootstrap sampling 
## # A tibble: 30 x 2
##    splits           id         
##    &amp;lt;list&amp;gt;           &amp;lt;chr&amp;gt;      
##  1 &amp;lt;split [113/39]&amp;gt; Bootstrap01
##  2 &amp;lt;split [113/40]&amp;gt; Bootstrap02
##  3 &amp;lt;split [113/44]&amp;gt; Bootstrap03
##  4 &amp;lt;split [113/41]&amp;gt; Bootstrap04
##  5 &amp;lt;split [113/39]&amp;gt; Bootstrap05
##  6 &amp;lt;split [113/40]&amp;gt; Bootstrap06
##  7 &amp;lt;split [113/42]&amp;gt; Bootstrap07
##  8 &amp;lt;split [113/35]&amp;gt; Bootstrap08
##  9 &amp;lt;split [113/42]&amp;gt; Bootstrap09
## 10 &amp;lt;split [113/41]&amp;gt; Bootstrap10
## # … with 20 more rows&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;recipes&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Recipes&lt;/h1&gt;
&lt;p&gt;Recipes is a powerful tool with functions for a wide range of feature engineering tasks designed to prepare data for modeling. Typing &lt;code&gt;recipes::&lt;/code&gt; into the Rstudio console is a great way to browse the available functions in the package.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;recipes_functions.jpg&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Let’s create a recipe to demonstrate how easy it is to apply feature engineering. There is really no need for feature engineering with this dataset, so we won’t actually use this recipe in the final workflow.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;iris_rec &amp;lt;- recipe(species ~., data = iris_train) %&amp;gt;%
  step_pca(all_predictors()) %&amp;gt;%
  step_normalize(all_predictors())

prep &amp;lt;-  prep(iris_rec)

kable(head(iris_juice &amp;lt;- juice(prep)))&lt;/code&gt;&lt;/pre&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr class=&#34;header&#34;&gt;
&lt;th align=&#34;left&#34;&gt;species&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;PC1&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;PC2&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;PC3&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;PC4&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;setosa&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1.1621621&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1.384382&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-0.0270717&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.0422303&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;setosa&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1.3983644&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1.159657&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.7767696&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.6840123&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;setosa&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1.4836145&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1.244589&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.0010748&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.1379599&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;setosa&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1.4923559&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1.089539&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.0331285&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-0.4892659&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;setosa&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1.1873971&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1.402225&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-0.4220083&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-0.3874109&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;setosa&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.7736181&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1.394953&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-0.8518454&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-0.1532614&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div id=&#34;creating-models-with-parsnip&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Creating models with &lt;strong&gt;Parsnip&lt;/strong&gt;&lt;/h1&gt;
&lt;p&gt;Let’s set up two different models: first, a &lt;strong&gt;generalized linear model&lt;/strong&gt; or &lt;strong&gt;glmnet&lt;/strong&gt;. In this step we will create the model, workflow and fit the bootstraps. Let’s take a look at the output from each step.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# set seed
set.seed(1234)

# generate the glmnet model with parsnip
glmnet_mod &amp;lt;- multinom_reg(penalty = 0) %&amp;gt;% 
  set_engine(&amp;quot;glmnet&amp;quot;) %&amp;gt;% 
  set_mode(&amp;quot;classification&amp;quot;)
glmnet_mod&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Multinomial Regression Model Specification (classification)
## 
## Main Arguments:
##   penalty = 0
## 
## Computational engine: glmnet&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# create a workflow
glmnet_wf &amp;lt;- workflow() %&amp;gt;%
  add_formula(species ~ .) 
glmnet_wf&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## ══ Workflow ════════════════════════════════════════════════════════════════════
## Preprocessor: Formula
## Model: None
## 
## ── Preprocessor ────────────────────────────────────────────────────────────────
## species ~ .&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# add the model to the workflow and use iris_boots to fit our model 25 times
glmnet_results &amp;lt;- glmnet_wf %&amp;gt;%
  add_model(glmnet_mod) %&amp;gt;% 
  fit_resamples(
    resamples = iris_boots,
    control = control_resamples(extract = extract_model,
                             save_pred = TRUE)
    )
glmnet_results&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # Resampling results
## # Bootstrap sampling 
## # A tibble: 30 x 6
##    splits       id        .metrics      .notes       .extracts    .predictions  
##    &amp;lt;list&amp;gt;       &amp;lt;chr&amp;gt;     &amp;lt;list&amp;gt;        &amp;lt;list&amp;gt;       &amp;lt;list&amp;gt;       &amp;lt;list&amp;gt;        
##  1 &amp;lt;split [113… Bootstra… &amp;lt;tibble [2 ×… &amp;lt;tibble [0 … &amp;lt;tibble [1 … &amp;lt;tibble [39 ×…
##  2 &amp;lt;split [113… Bootstra… &amp;lt;tibble [2 ×… &amp;lt;tibble [0 … &amp;lt;tibble [1 … &amp;lt;tibble [40 ×…
##  3 &amp;lt;split [113… Bootstra… &amp;lt;tibble [2 ×… &amp;lt;tibble [0 … &amp;lt;tibble [1 … &amp;lt;tibble [44 ×…
##  4 &amp;lt;split [113… Bootstra… &amp;lt;tibble [2 ×… &amp;lt;tibble [0 … &amp;lt;tibble [1 … &amp;lt;tibble [41 ×…
##  5 &amp;lt;split [113… Bootstra… &amp;lt;tibble [2 ×… &amp;lt;tibble [0 … &amp;lt;tibble [1 … &amp;lt;tibble [39 ×…
##  6 &amp;lt;split [113… Bootstra… &amp;lt;tibble [2 ×… &amp;lt;tibble [0 … &amp;lt;tibble [1 … &amp;lt;tibble [40 ×…
##  7 &amp;lt;split [113… Bootstra… &amp;lt;tibble [2 ×… &amp;lt;tibble [0 … &amp;lt;tibble [1 … &amp;lt;tibble [42 ×…
##  8 &amp;lt;split [113… Bootstra… &amp;lt;tibble [2 ×… &amp;lt;tibble [0 … &amp;lt;tibble [1 … &amp;lt;tibble [35 ×…
##  9 &amp;lt;split [113… Bootstra… &amp;lt;tibble [2 ×… &amp;lt;tibble [0 … &amp;lt;tibble [1 … &amp;lt;tibble [42 ×…
## 10 &amp;lt;split [113… Bootstra… &amp;lt;tibble [2 ×… &amp;lt;tibble [0 … &amp;lt;tibble [1 … &amp;lt;tibble [41 ×…
## # … with 20 more rows&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# look at the model metrics
collect_metrics(glmnet_results)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 2 x 5
##   .metric  .estimator  mean     n std_err
##   &amp;lt;chr&amp;gt;    &amp;lt;chr&amp;gt;      &amp;lt;dbl&amp;gt; &amp;lt;int&amp;gt;   &amp;lt;dbl&amp;gt;
## 1 accuracy multiclass 0.939    30 0.00672
## 2 roc_auc  hand_till  0.986    30 0.00208&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now for a &lt;strong&gt;random forest&lt;/strong&gt; model. We only need to tweak a few things and walah!&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;set.seed(1234)
rf_mod &amp;lt;- rand_forest() %&amp;gt;%
  set_engine(&amp;quot;ranger&amp;quot;) %&amp;gt;%
  set_mode(&amp;quot;classification&amp;quot;)

# We set up a workflow and add the parts of our model together like legos
rf_wf &amp;lt;- workflow() %&amp;gt;%
  add_formula(species ~ .)

# Here we fit our 25 resampled datasets 
rf_results &amp;lt;- rf_wf %&amp;gt;%
  add_model(rf_mod) %&amp;gt;% 
  fit_resamples(
    resamples = iris_boots,
    control = control_resamples(save_pred = TRUE)
    )
collect_metrics(rf_results)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 2 x 5
##   .metric  .estimator  mean     n std_err
##   &amp;lt;chr&amp;gt;    &amp;lt;chr&amp;gt;      &amp;lt;dbl&amp;gt; &amp;lt;int&amp;gt;   &amp;lt;dbl&amp;gt;
## 1 accuracy multiclass 0.946    30 0.00660
## 2 roc_auc  hand_till  0.994    30 0.00111&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here’s a look at the confusion matrix summaries for both models. The confusion matrix let’s us see the correct and incorrect predictions of our models in a single table.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;glmnet_results %&amp;gt;%
  conf_mat_resampled() &lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 9 x 3
##   Prediction Truth       Freq
##   &amp;lt;fct&amp;gt;      &amp;lt;fct&amp;gt;      &amp;lt;dbl&amp;gt;
## 1 setosa     setosa     13.4 
## 2 setosa     versicolor  0   
## 3 setosa     virginica   0   
## 4 versicolor setosa      0   
## 5 versicolor versicolor 12.1 
## 6 versicolor virginica   1.27
## 7 virginica  setosa      0   
## 8 virginica  versicolor  1.17
## 9 virginica  virginica  12.3&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;rf_results %&amp;gt;%
  conf_mat_resampled() &lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 9 x 3
##   Prediction Truth       Freq
##   &amp;lt;fct&amp;gt;      &amp;lt;fct&amp;gt;      &amp;lt;dbl&amp;gt;
## 1 setosa     setosa      13.4
## 2 setosa     versicolor   0  
## 3 setosa     virginica    0  
## 4 versicolor setosa       0  
## 5 versicolor versicolor  12.2
## 6 versicolor virginica    1.1
## 7 virginica  setosa       0  
## 8 virginica  versicolor   1.1
## 9 virginica  virginica   12.4&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The ROC curve helps us visually interpret our model performance at every threshold.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;glmnet_results %&amp;gt;%
  collect_predictions() %&amp;gt;%
  group_by(id) %&amp;gt;%
  roc_curve(species, .pred_setosa:.pred_virginica) %&amp;gt;%
  autoplot()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2020-10-21-iris-data/index_files/figure-html/unnamed-chunk-9-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;rf_results %&amp;gt;%
  collect_predictions() %&amp;gt;%
  group_by(id) %&amp;gt;%
  roc_curve(species, .pred_setosa:.pred_virginica) %&amp;gt;%
  autoplot() +
  theme(legend.position = &amp;#39;none&amp;#39;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2020-10-21-iris-data/index_files/figure-html/unnamed-chunk-10-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;final-fit&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Final fit&lt;/h1&gt;
&lt;p&gt;This is it! By using the &lt;code&gt;last_fit(tidy_split)&lt;/code&gt;, we are able to train our model on the training set and test the model on the testing set in one fell swoop! Note, this is the only time we use the test set.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;final_glmnet &amp;lt;- glmnet_wf %&amp;gt;%
    add_model(glmnet_mod) %&amp;gt;%
    last_fit(tidy_split)

final_glmnet&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # Resampling results
## # Monte Carlo cross-validation (0.75/0.25) with 1 resamples  
## # A tibble: 1 x 6
##   splits       id           .metrics      .notes       .predictions    .workflow
##   &amp;lt;list&amp;gt;       &amp;lt;chr&amp;gt;        &amp;lt;list&amp;gt;        &amp;lt;list&amp;gt;       &amp;lt;list&amp;gt;          &amp;lt;list&amp;gt;   
## 1 &amp;lt;split [113… train/test … &amp;lt;tibble [2 ×… &amp;lt;tibble [0 … &amp;lt;tibble [37 × … &amp;lt;workflo…&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;final_rf &amp;lt;- rf_wf %&amp;gt;%
    add_model(rf_mod) %&amp;gt;%
    last_fit(tidy_split)

final_rf&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # Resampling results
## # Monte Carlo cross-validation (0.75/0.25) with 1 resamples  
## # A tibble: 1 x 6
##   splits       id           .metrics      .notes       .predictions    .workflow
##   &amp;lt;list&amp;gt;       &amp;lt;chr&amp;gt;        &amp;lt;list&amp;gt;        &amp;lt;list&amp;gt;       &amp;lt;list&amp;gt;          &amp;lt;list&amp;gt;   
## 1 &amp;lt;split [113… train/test … &amp;lt;tibble [2 ×… &amp;lt;tibble [0 … &amp;lt;tibble [37 × … &amp;lt;workflo…&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;confusion-matrices&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Confusion Matrices&lt;/h1&gt;
&lt;p&gt;Finally, let’s generate a multiclass confusion matrix with the results from our test data. The confusion matrix provides a count of each outcome for all possible outcomes. The columns contain the true values and predictions are set across rows. This confusion matrix might look confusing because all predictions are correct.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;collect_metrics(final_glmnet)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 2 x 3
##   .metric  .estimator .estimate
##   &amp;lt;chr&amp;gt;    &amp;lt;chr&amp;gt;          &amp;lt;dbl&amp;gt;
## 1 accuracy multiclass         1
## 2 roc_auc  hand_till          1&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;collect_predictions(final_glmnet) %&amp;gt;%
  conf_mat(species, .pred_class) %&amp;gt;% 
  autoplot(type = &amp;#39;heatmap&amp;#39;) &lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2020-10-21-iris-data/index_files/figure-html/unnamed-chunk-12-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;collect_metrics(final_rf)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 2 x 3
##   .metric  .estimator .estimate
##   &amp;lt;chr&amp;gt;    &amp;lt;chr&amp;gt;          &amp;lt;dbl&amp;gt;
## 1 accuracy multiclass     0.973
## 2 roc_auc  hand_till      1&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;collect_predictions(final_rf) %&amp;gt;%
  conf_mat(species, .pred_class) %&amp;gt;% 
  autoplot(type = &amp;#39;heatmap&amp;#39;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2020-10-21-iris-data/index_files/figure-html/unnamed-chunk-13-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;final-thoughts&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Final thoughts&lt;/h1&gt;
&lt;p&gt;It’s always good to ask the question, ‘Do my results make sense’? Both models exhibit near perfect predictive power but are they really that good? From our visual analysis, we can confidently say yes, there is a clear distinction between species when comparing the explanatory features. Now that we have a model, we have the power to predict iris type on new data 😄.&lt;/p&gt;
&lt;p&gt;I would like to thank the unsung heroes of the tidyverse and tidymodels: &lt;strong&gt;Julia Silge&lt;/strong&gt;, &lt;strong&gt;David Robinson&lt;/strong&gt; and &lt;strong&gt;Andrew Couch&lt;/strong&gt; for creating and sharing amazing, open source learning resources.&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
  </channel>
</rss>
